datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Player {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  eloScore   Int      @default(1000)
  highestElo Int      @default(1000)
  wins       Int      @default(0)
  losses     Int      @default(0)
  isActive   Boolean  @default(true)
  userId     String?
  user       User?    @relation(fields: [userId], references: [id])

  // Matches where this player is player1
  matchesAsPlayer1 Match[] @relation("MatchPlayer1")
  // Matches where this player is player2
  matchesAsPlayer2 Match[] @relation("MatchPlayer2")
  // Matches where this player is winner
  matchesWon       Match[] @relation("MatchWinner")
}

model Match {
  id                Int      @id @default(autoincrement())
  player1Id         Int
  player2Id         Int
  winnerId          Int?
  date              DateTime @default(now())
  notes             String?
  previousPlayer1Elo Int     @default(1000)  // Store previous Elo for undo
  previousPlayer2Elo Int     @default(1000)  // Store previous Elo for undo

  player1 Player  @relation("MatchPlayer1", fields: [player1Id], references: [id])
  player2 Player  @relation("MatchPlayer2", fields: [player2Id], references: [id])
  winner  Player? @relation("MatchWinner", fields: [winnerId], references: [id])
}

model Settings {
  id      String  @id @default(cuid())
  kFactor Int     @default(50)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  username      String    @unique
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  isAdmin       Boolean   @default(false)
  accounts      Account[]
  sessions      Session[]
  players       Player[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}