datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Player {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  eloScore   Int      @default(1000)
  highestElo Int      @default(1000)
  wins       Int      @default(0)
  losses     Int      @default(0)
  isActive   Boolean  @default(true)
  userId     String?
  user       User?    @relation(fields: [userId], references: [id])

  // Matches where this player is player1
  matchesAsPlayer1 Match[] @relation("MatchPlayer1")
  // Matches where this player is player2
  matchesAsPlayer2 Match[] @relation("MatchPlayer2")
  // Matches where this player is winner
  matchesWon       Match[] @relation("MatchWinner")

  // Season stats
  seasonStats      PlayerSeasonStats[]
}

model Match {
  id                Int      @id @default(autoincrement())
  player1Id         Int
  player2Id         Int
  winnerId          Int?
  date              DateTime @default(now())
  notes             String?
  seasonId          Int
  
  // ELO change records for this match
  player1EloChange  Int?     // How much ELO player1 gained/lost
  player2EloChange  Int?     // How much ELO player2 gained/lost
  
  player1 Player  @relation("MatchPlayer1", fields: [player1Id], references: [id])
  player2 Player  @relation("MatchPlayer2", fields: [player2Id], references: [id])
  winner  Player? @relation("MatchWinner", fields: [winnerId], references: [id])
  season  Season   @relation(fields: [seasonId], references: [id])
}

model Settings {
  id      String  @id @default(cuid())
  kFactor Int     @default(50)
}

model User {
  id            String    @id @default(cuid())
  username      String    @unique
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  isAdmin       Boolean   @default(false)
  players       Player[]
}

model Season {
  id               Int                @id @default(autoincrement())
  name             String             @unique  // e.g., "Spring 2023", "Season 1", etc.
  startDate        DateTime
  endDate          DateTime?          // null if the season is ongoing
  isActive         Boolean            @default(true) // only one season should be active at a time
  createdAt        DateTime           @default(now())
  
  // Relationships
  matches          Match[]
  playerStats      PlayerSeasonStats[]
}

model PlayerSeasonStats {
  id               Int      @id @default(autoincrement())
  playerId         Int
  seasonId         Int
  initialElo       Int      @default(1000) // Starting ELO for the season
  finalElo         Int?     // Final ELO at end of season (null if season ongoing)
  highestElo       Int      @default(1000)
  wins             Int      @default(0)
  losses           Int      @default(0)
  
  // Relationships
  player           Player   @relation(fields: [playerId], references: [id])
  season           Season   @relation(fields: [seasonId], references: [id])
  
  @@unique([playerId, seasonId]) // A player can only have one stats record per season
}