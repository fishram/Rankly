generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Player {
  id               Int                @id @default(autoincrement())
  name             String             @unique
  eloScore         Int                @default(1000)
  highestElo       Int                @default(1000)
  wins             Int                @default(0)
  losses           Int                @default(0)
  isActive         Boolean            @default(true)
  userId           String?
  matchesAsPlayer1 Match[]            @relation("MatchPlayer1")
  matchesAsPlayer2 Match[]            @relation("MatchPlayer2")
  matchesWon       Match[]            @relation("MatchWinner")
  user             User?              @relation(fields: [userId], references: [id])
  seasonStats      PlayerSeasonStats[]
}

model Match {
  id              Int      @id @default(autoincrement())
  player1Id       Int
  player2Id       Int
  winnerId        Int?
  date            DateTime @default(now())
  notes           String?
  seasonId        Int      
  player1EloChange Int?
  player2EloChange Int?
  player1         Player   @relation("MatchPlayer1", fields: [player1Id], references: [id])
  player2         Player   @relation("MatchPlayer2", fields: [player2Id], references: [id])
  winner          Player?  @relation("MatchWinner", fields: [winnerId], references: [id])
  season          Season   @relation(fields: [seasonId], references: [id])
}

model Settings {
  id      String @id @default(cuid())
  kFactor Int    @default(50)
}

model User {
  id            String    @id @default(cuid())
  username      String    @unique
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  isAdmin       Boolean   @default(false)
  Account       Account[]
  players       Player[]
  Session       Session[]
}

model Season {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  startDate DateTime  @db.Timestamp(6)
  endDate   DateTime? @db.Timestamp(6)
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  matches   Match[]
  playerStats PlayerSeasonStats[]
}

model PlayerSeasonStats {
  id               Int      @id @default(autoincrement())
  playerId         Int
  seasonId         Int
  initialElo       Int      @default(1000)
  finalElo         Int?
  highestElo       Int      @default(1000)
  wins             Int      @default(0)
  losses           Int      @default(0)
  
  player           Player   @relation(fields: [playerId], references: [id])
  season           Season   @relation(fields: [seasonId], references: [id])
  
  @@unique([playerId, seasonId])
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
